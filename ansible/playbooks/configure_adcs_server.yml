---
- name: CONFIGURING CERTIFICATE SERVICES
  hosts: ADCS
  gather_facts: no
  tasks:
    - name: Rename server
      win_hostname:
        name: "{{ inventory_hostname }}"
      register: rename

    - name: Debug rename output
      debug:
        msg: "Server rename result: {{ rename }}"

    - name: Reboot after rename if required
      win_reboot:
      when: rename.reboot_required
      register: rename_reboot_status

    - name: Wait for server to come back online after rename reboot
      wait_for_connection:
        timeout: 600
      when: rename_reboot_status.changed

    - name: Debug DNS server
      debug:
        msg: "DNS server will be set to {{ hostvars['DC']['ansible_host'] }}"

    - name: Set DNS to Domain Controller
      win_dns_client:
        adapter_names: '*'
        dns_servers:
        - "{{ hostvars['DC']['ansible_host'] }}"

    - name: Debug domain join parameters
      debug:
        msg: "Joining domain {{ domain_name }} with user Administrator@{{ domain_name }}"

    - name: Join Domain
      microsoft.ad.membership:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "Administrator@{{ domain_name }}"
        domain_admin_password: "{{ domain_admin_password }}"
        state: domain
        reboot: true
      register: join_domain_status

    - name: Reboot after domain join if required
      win_reboot:
      when: join_domain_status.changed
      register: domain_reboot_status

    - name: Wait for server to come back online after domain join reboot
      wait_for_connection:
        timeout: 600
      when: domain_reboot_status.changed

    - name: Debug mapped drive parameters
      debug:
        msg: "Mapping shared folder to Z: drive with path \\\\fs.{{ domain_name }}\\SharedFolder"

    - name: Map shared folder
      community.windows.win_mapped_drive:
        letter: 'Z'
        path: \\fs.{{ domain_name }}\SharedFolder
        state: present

    - name: Debug autologon parameters
      debug:
        msg: "Setting autologon for user {{ snare_admin_login }}"

    - name: Set autologon for specific user
      community.windows.win_auto_logon:
        username: '{{ snare_admin_login }}'
        password: '{{ snare_admin_password }}'

    - name: Debug ADCS prerequisite installation
      debug:
        msg: "Installing ADCS prerequisites"

    - name: Install ADCS
      win_feature:
        name:
        - AD-Certificate
        - ADCS-Cert-Authority
        - ADCS-Online-Cert
        - ADCS-Web-Enrollment
        - RSAT-Role-Tools
        state: present
        include_sub_features: yes
        include_management_tools: yes
      register: win_feature

    - name: Debug ADCS prerequisite installation result
      debug:
        msg: "ADCS prerequisite installation result: {{ win_feature }}"

    - name: Install-ADCSCertificationAuthority-PS
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param (
              [String]
              $da_login,

              [String]
              $da_pass
          )
          $pass = ConvertTo-SecureString $da_pass -AsPlainText -Force
          $Cred = New-Object System.Management.Automation.PSCredential ($da_login, $pass)
          try {
            Install-AdcsCertificationAuthority -Credential $Cred -CAType EnterpriseRootCA -CryptoProviderName "RSA#Microsoft Software Key Storage Provider" -KeyLength 2048 -HashAlgorithmName SHA256 -ValidityPeriod Years -ValidityPeriodUnits 5 -CACommonName "{{ ca_name }}" -Force
            $Ansible.Changed = $true
          } catch {
            $Ansible.Changed = $false
          }
        error_action: stop
        parameters:
          da_login: "{{ domain_admin_login }}"
          da_pass: "{{ domain_admin_password }}"

    - name: Enable Web Enrollment
      ansible.windows.win_powershell:
        script: |
          [CmdletBinding()]
          param ()
          try {
            Install-AdcsWebEnrollment -Force
            $Ansible.Changed = $true
          } catch {
            $Ansible.Changed = $false
          }

    - name: Refresh group policy
      win_command: gpupdate /force

    - name: Debug final reboot initiation
      debug:
        msg: "Rebooting the server to apply all configurations"

    - name: Force reboot the server after all tasks are done
      win_reboot:
      register: final_reboot_status

    - name: Wait for server to come back online after final reboot
      wait_for_connection:
        timeout: 600
      when: final_reboot_status.changed
