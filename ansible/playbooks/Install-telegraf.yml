---
- name: Install and Configure Telegraf on Windows Hosts
  hosts: windows
  gather_facts: no
  tasks:
    - name: Ensure 'C:\Temp' directory exists
      win_file:
        path: C:\Temp
        state: directory

    - name: Download Telegraf Binary
      win_get_url:
        url: https://dl.influxdata.com/telegraf/releases/telegraf-1.31.0_windows_amd64.zip
        dest: C:\Temp\telegraf-1.31.0_windows_amd64.zip

    - name: Ensure 'C:\Program Files\InfluxData\telegraf' directory exists
      win_file:
        path: C:\Program Files\InfluxData\telegraf
        state: directory

    - name: Extract Telegraf archive
      win_unzip:
        src: C:\Temp\telegraf-1.31.0_windows_amd64.zip
        dest: C:\Program Files\InfluxData\telegraf
        creates: C:\Program Files\InfluxData\telegraf\telegraf.exe

    - name: Create Telegraf configuration file
      win_copy:
        content: |
          ###############################################################################
          # Windows Performance Counters plugin.
          # These are the recommended method of monitoring system metrics on windows,
          # as the regular system plugins (inputs.cpu, inputs.mem, etc.) rely on WMI,
          # which utilize more system resources.
          #
          # See more configuration examples at:
          #   https://github.com/influxdata/telegraf/tree/master/plugins/inputs/win_perf_counters
          [[inputs.win_perf_counters]]
            [[inputs.win_perf_counters.object]]
              # Processor usage, alternative to native, reports on a per core.
              ObjectName = "Processor"
              Instances = ["*"]
              Counters = [
                "% Idle Time",
                "% Interrupt Time",
                "% Privileged Time",
                "% User Time",
                "% Processor Time",
              ]
              Measurement = "win_cpu"
              # Set to true to include _Total instance when querying for all (*).
              #IncludeTotal=false
            [[inputs.win_perf_counters.object]]
              # Disk times and queues
              ObjectName = "LogicalDisk"
              Instances = ["*"]
              Counters = [
                "% Idle Time",
                "% Disk Time","% Disk Read Time",
                "% Disk Write Time",
                "% User Time",
                "Current Disk Queue Length",
              ]
              Measurement = "win_disk"
              # Set to true to include _Total instance when querying for all (*).
              #IncludeTotal=false
            [[inputs.win_perf_counters.object]]
              ObjectName = "System"
              Counters = [
                "Context Switches/sec",
                "System Calls/sec",
              ]
              Instances = ["_Total"]
              Measurement = "win_system"
              # Set to true to include _Total instance when querying for all (*).
              IncludeTotal=true
            [[inputs.win_perf_counters.object]]
              # Example query where the Instance portion must be removed to get data back,
              # such as from the Memory object.
              ObjectName = "Memory"
              Counters = [
                "Available Bytes",
                "Cache Faults/sec",
                "Demand Zero Faults/sec",
                "Page Faults/sec",
                "Pages/sec",
                "Transition Faults/sec",
                "Pool Nonpaged Bytes",
                "Pool Paged Bytes",
              ]
              # Use 6 x - to remove the Instance bit from the query.
              Instances = ["_Total"]
              Measurement = "win_mem"
              # Set to true to include _Total instance when querying for all (*).
              IncludeTotal=true

            [[inputs.win_perf_counters.object]]
              # Example query where the Instance portion must be removed to get data back,
              # such as from the Paging File object.
              ObjectName = "Paging File"
              Counters = [
                "% Usage",
              ]
              Instances = ["_Total"]
              Measurement = "win_swap"

            [[inputs.win_services]]
              ## Names of the services to monitor. Leave empty to monitor all the available services on the host. Globs accepted. Case sensitive.
              service_names = ["*"]

          # Output Plugin - InfluxDB
          [[outputs.influxdb]]
            urls = ["http://192.168.10.94:8086"]
            database = "telegraf"
            username = "snare"
            password = "snare"
            skip_database_creation = true

        dest: C:\Program Files\InfluxData\telegraf\telegraf.conf
        force: yes

    - name: Stop Telegraf service if running
      win_service:
        name: telegraf
        state: stopped
      ignore_errors: yes

    - name: Uninstall Telegraf service if installed
      win_shell: |
        cd "C:\Program Files\InfluxData\telegraf"
        .\telegraf.exe service uninstall
      args:
        executable: powershell
      ignore_errors: yes

    - name: Install Telegraf service
      win_shell: |
        cd "C:\Program Files\InfluxData\telegraf"
        .\telegraf.exe --service install --config "C:\Program Files\InfluxData\telegraf\telegraf.conf"
      args:
        executable: powershell

    - name: Start Telegraf service
      win_service:
        name: telegraf
        state: started
        start_mode: auto
